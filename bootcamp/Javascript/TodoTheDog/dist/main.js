(()=>{"use strict";const t=class{constructor(t){this.element=t,this.parentDiv}renderElement(){const t=document.createElement("div");return t.id=this.element.title,this.element.hasOwnProperty("className")&&"Task"===this.element.className&&(this.parentDiv=document.getElementById("tasks"),t.innerHTML=`<div class="task-content">\n                <div class="task-content-column">\n                    <div class="task-name">${this.element.title}</div>\n                    <div class="task-description">${this.element.description}</div>\n                </div>\n                <div class="task-content-column">\n                    <div class="task-completed-by">Complete by:</div>\n                    <div class="task-end-date">${this.element.endDate}</div>\n                </div>\n            </div>\n            <div class="task-btns">\n                <i class="material-icons task-complete-btn">check</i>\n                <i class="material-icons task-edit-btn">edit</i>\n                <i class="material-icons task-remove-btn">delete</i>\n            </div>\n\n            <form class="task-input-form">\n                <div class="task-content form-content">\n                    <div class="task-content-column">\n                    <label for="title-input">Task</label>\n                        <input class="task-name-input" name="title-input" type="text" value="${this.element.title}"></input>\n                        <label for="title-input">Description</label>\n                        <textarea class="task-description-input" type="text-area"> ${this.element.description}</textarea>\n                    </div>\n                    <div class="task-content-column">\n                        <div class="task-completed-by">Complete by:</div>\n                        <input class="task-end-date-input" type="date" value="${this.element.endDate}">\n                    </div>\n                </div>\n                <div class="task-btns">\n                    <submit class="material-icons task-input-submit-btn">edit</submit>\n                    <i class="material-icons task-input-close-btn">close</i>\n                    \n                </div>\n            </form>\n\n            <div class="task-completion-bar ${this.element.complete?"task-completed":""}">\n            </div>\n\n            \n            `,t.classList.add("task")),this.element.hasOwnProperty("className")&&"Project"===this.element.className&&(this.parentDiv=document.getElementById("projects"),t.innerHTML=`<div class="project-name">${this.element.title}</div><i class="material-icons project-remove-btn">delete</i>`,t.classList.add("project"),this.element.active&&t.classList.add("active-project")),this.element.loaded||(this.parentDiv.appendChild(t),console.log("Created element "+t.id)),t}removeElement(){console.log("removed element: "+this.element.title),document.getElementById(this.element.title).remove()}},e=new class{constructor(){this.currentProjectIndex=0,this.projects=[],this.addProject("Path of Exile",!0),this.addProject("World of Warcraft",!1),this.addDefaultTasks(),this.renderApplication(),this.setActiveProject(0)}renderApplication(){this.renderProjects()}renderProjects(){this.projects.forEach((e=>{new t(e).renderElement(),e.loaded=!0}))}renderTasks(){this.projects[this.currentProjectIndex].tasks.forEach((e=>{new t(e).renderElement()}))}addProject(t,e){const s=new class{constructor(t,e){this.className="Project",this.title=t,this.tasks=[],this.active=e,this.loaded=!1}addTask(t,e,s,n,i){const a=new class{constructor(t,e,s,n){this.className="Task",this.title=t,this.description=e,this.complete=s,this.endDate=n}updateFields(t,e,s,n,i){this.title=t,this.description=e,this.complete=s,this.endDate=i}completeTask(){this.complete=!0}}(t,e,s,n,i);this.tasks.push(a)}removeTask(t){this.tasks.splice(t,1)}getProjectLength(){return this.tasks.length}clearTasks(){this.tasks=[]}}(t,e);this.projects.push(s),this.renderProjects(),1==this.projects.length&&this.setActiveProject(0)}removeProject(t){this.projects.splice(t,1),this.currentProjectIndex=0,this.projects.length<1?this.clearTasks():this.setActiveProject(0)}setActiveProject(t){this.clearTasks(),this.projects[this.currentProjectIndex].active=!1,this.currentProjectIndex=t,this.projects[this.currentProjectIndex].active=!0,this.renderTasks()}completeTask(t){const e=this.projects[this.currentProjectIndex].tasks[t];e.complete=!e.complete}getTask(t){return this.projects[this.currentProjectIndex].tasks[t]}clearTasks(){document.getElementById("tasks").innerHTML=""}clearProjects(){document.getElementById("projects").innerHTML=""}addDefaultTasks(){this.projects[0].addTask("Get exalted orbs.","Farm heist for more orbs",!1,"2020-10-24"),this.projects[0].addTask("Level golemancer","Get to level 70",!1,"2020-10-24"),this.projects[1].addTask("Get 2.5 helm on warlock.","No idols needed, just go to AQ40.",!1,"2020-10-24"),this.projects[1].addTask("ZG GDKP","Buy idol at all costs",!1,"2020-10-24"),this.projects[1].addTask("Level hunter","For fun yo",!1,"2020-10-24")}};window.addEventListener("load",(function(t){document.querySelector("#tasks-header").innerHTML=document.querySelector(".active-project").innerHTML,document.getElementById("projects").addEventListener("click",(function(t){const s=t.target.parentNode,n=Array.prototype.indexOf.call(this.children,s);t.target.classList.contains("project-name")&&(this.children.length>0&&this.querySelector(".active-project").classList.toggle("active-project"),s.classList.toggle("active-project"),e.setActiveProject(n)),t.target.classList.contains("project-remove-btn")&&this.children.length>1&&(s.classList.contains("active-project")?(s.remove(),this.children.length>0&&this.querySelector(".project").classList.add("active-project")):s.remove(),e.removeProject(n)),document.querySelector("#tasks-header").innerHTML=document.querySelector(".active-project").innerHTML})),document.getElementsByClassName("projects-header")[0].addEventListener("click",(function(t){if("add-project-btn"==t.target.id){const t=document.getElementById("myModal"),s=document.getElementsByClassName("modal-close")[0],n=document.getElementById("project-submit-btn"),i=document.getElementById("project-name-input");t.style.display="block",window.onclick=function(a){a.target!=t&&a.target!=s||(t.style.display="none",i.value=""),a.target==n&&(t.style.display="none",e.addProject(i.value,!1),i.value="")}}("projects-header-title"==t.target.id||t.target.classList.contains("material-icons"))&&(console.log("hiding projects"),document.getElementById("projects").classList.toggle("projects-hidden"))})),document.getElementById("tasks").addEventListener("click",(function(t){const s=t.target.closest(".task"),n=Array.prototype.indexOf.call(this.children,s);function i(t){return s.querySelector(t)}const a=i(".task-content"),c=i(".task-name"),o=i(".task-description"),l=i(".task-end-date"),r=i(".task-btns"),d=i(".task-input-form"),m=i(".task-name-input"),p=i(".task-description-input"),h=i(".task-end-date-input"),u=i(".task-completion-bar");if(t.target.classList.contains("task-complete-btn")&&(u.classList.toggle("task-completed"),e.completeTask(n)),t.target.classList.contains("task-input-close-btn")){d.style.display="none",a.style.display="flex",r.style.display="flex";const t=e.getTask(n);m.value=t.title,p.innerHTML=t.description,h.value=t.endDate}if(t.target.classList.contains("task-edit-btn")&&(d.style.display="block",a.style.display="none",r.style.display="none"),t.target.classList.contains("task-input-submit-btn")){const t=e.getTask(n);t.title=m.value,t.description=p.value,t.endDate=h.value,c.innerHTML=t.title,o.innerHTML=t.description,l.innerHTML=t.endDate,a.style.display="flex",r.style.display="flex",d.style.display="none"}})),Array.from(document.getElementsByClassName("task-input-form")).forEach((t=>{t.addEventListener("submit",(function(t){t.preventDefault()}))}))}))})();